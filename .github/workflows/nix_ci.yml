name: "Nix Flake"

on:
  pull_request:
    paths:
      - .github/workflows/nix_ci.yml
      - flake.*
      - backend/**
      - frontend/**
  push:
    branches:
      - 'main'
    paths:
      - flake.*
      - backend/**
      - frontend/**

jobs:
  tests:
    name: CI Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: game-night
        # If you chose signing key for write access
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Build Backend
      run: nix build .#game-night-backend

    - name: Build Frontend
      run: nix build .#game-night-frontend

    - name: Build Docker Image
      run: nix build .#game-night-docker

    - name: Log in to the Container Registry
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DO_TOKEN }}
        password: ${{ secrets.DO_TOKEN }}

    - name: Push Docker Image
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        docker load < result
        docker image ls
        docker tag game-night ${{ secrets.REGISTRY }}/game-night-registry/game-night:0.1.0
        docker push ${{ secrets.REGISTRY }}/game-night-registry/game-night:0.1.0

        docker image ls
        docker tag game-night ${{ secrets.REGISTRY }}/game-night-registry/game-night:latest
        docker push ${{ secrets.REGISTRY }}/game-night-registry/game-night:latest


    - name: Deploy App
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOSTNAME }}
        username: ${{ secrets.AUTOMATION_USERNAME }}
        key: ${{ secrets.AUTOMATION_SSH_KEY_PRIVATE }}
        script: |
          whoami
          ls -la


