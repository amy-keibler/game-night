name: "Nix Flake"

on:
  pull_request:
    paths:
      - .github/workflows/nix_ci.yml
      - flake.*
      - backend/**
      - frontend/**
  push:
    branches:
      - 'main'
    paths:
      - flake.*
      - backend/**
      - frontend/**

jobs:
  tests:
    name: CI Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: game-night
        # If you chose signing key for write access
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Build Backend
      run: nix build .#game-night-backend

    - name: Build Frontend
      run: nix build .#game-night-frontend

    - name: Build Docker Image
      run: nix build .#game-night-docker

    - name: Log in to the Container Registry
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DO_TOKEN }}
        password: ${{ secrets.DO_TOKEN }}

    - name: Push Docker Image
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # TODO - There's an action to extract the tags and label so we don't have to hardcode these
        docker load < result
        docker image ls | grep -i game-night
        docker tag game-night:0.1.0 ${{ secrets.REGISTRY }}/game-night-registry/game-night:0.1.0

        docker image ls | grep -i game-night
        docker push ${{ secrets.REGISTRY }}/game-night-registry/game-night:0.1.0

        docker image ls | grep -i game-night
        docker tag game-night:0.1.0 ${{ secrets.REGISTRY }}/game-night-registry/game-night:latest
        docker push ${{ secrets.REGISTRY }}/game-night-registry/game-night:latest


    - name: Deploy App
      # Reference: https://blog.benoitblanchon.fr/github-action-run-ssh-commands/
      # TODO - Uncomment before merge
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Setup SSH
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/automation.key
        chmod 600 ~/.ssh/automation.key
        cat >>~/.ssh/config <<END
        Host prod
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/automation.key
          StrictHostKeyChecking no
        END

        ssh prod "
          # Stop App and DB if they are running
          sudo podman stop game-night-app || exit 0
          sudo podman stop game-night-db || exit 0

          # Create New Pod (removes containers also)
          sudo podman pod create --replace -p 2727:2727 --name game-night

          # Start Database
          sudo podman run -d \
            --pod game-night \
            --name game-night-db \
            -e POSTGRES_USER \
            -e POSTGRES_PASSWORD \
            -e POSTGRES_DB=game-night \
            -v /mnt/game-night-prod/postgres-data:/var/lib/postgresql/data \
            docker.io/library/postgres:14.2
          
          # Start App
          sudo podman login -u ${{ secrets.DO_TOKEN }}' -p ${{ secrets.DO_TOKEN }} ${{ secrets.REGISTRY }}
          sudo podman run -d \
            --pod game-night \
            --name game-night-app \
            -e DATABASE_URL \
            ${{ secrets.REGISTRY }}/game-night-registry/game-night:latest

          sudo podman ps
        "

      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_PROD_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PROD_PASSWORD }}
        SSH_USER: ${{ secrets.AUTOMATION_USERNAME }}
        SSH_USER_PASSWORD: ${{ secrets.AUTOMATION_USER_PASSWORD }}
        SSH_KEY: ${{ secrets.AUTOMATION_SSH_KEY_PRIVATE }}
        SSH_HOST: ${{ secrets.PROD_HOSTNAME }}
        DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}




